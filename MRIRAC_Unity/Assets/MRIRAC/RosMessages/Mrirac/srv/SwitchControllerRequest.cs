//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mrirac
{
    [Serializable]
    public class SwitchControllerRequest : Message
    {
        public const string k_RosMessageName = "mrirac_msgs/SwitchController";
        public override string RosMessageName => k_RosMessageName;

        //  The SwitchController service allows you stop a number of controllers
        //  and start a number of controllers, all in one single timestep of the
        //  controller_manager control loop.
        //  To switch controllers, specify
        //   * the list of controller names to start,
        //   * the list of controller names to stop, and
        //   * the strictness (BEST_EFFORT or STRICT)
        //     * STRICT means that switching will fail if anything goes wrong (an invalid
        //       controller name, a controller that failed to start, etc. )
        //     * BEST_EFFORT means that even when something goes wrong with on controller,
        //       the service will still try to start/stop the remaining controllers
        //   * start the controllers as soon as their hardware dependencies are ready, will
        //     wait for all interfaces to be ready otherwise
        //   * the timeout in seconds before aborting pending controllers. Zero for infinite
        //  The return value "ok" indicates if the controllers were switched
        //  successfully or not.  The meaning of success depends on the
        //  specified strictness.
        public string[] start_controllers;
        public string[] stop_controllers;
        public int strictness;
        public const int BEST_EFFORT = 1;
        public const int STRICT = 2;
        public bool start_asap;
        public double timeout;

        public SwitchControllerRequest()
        {
            this.start_controllers = new string[0];
            this.stop_controllers = new string[0];
            this.strictness = 0;
            this.start_asap = false;
            this.timeout = 0.0;
        }

        public SwitchControllerRequest(string[] start_controllers, string[] stop_controllers, int strictness, bool start_asap, double timeout)
        {
            this.start_controllers = start_controllers;
            this.stop_controllers = stop_controllers;
            this.strictness = strictness;
            this.start_asap = start_asap;
            this.timeout = timeout;
        }

        public static SwitchControllerRequest Deserialize(MessageDeserializer deserializer) => new SwitchControllerRequest(deserializer);

        private SwitchControllerRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.start_controllers, deserializer.ReadLength());
            deserializer.Read(out this.stop_controllers, deserializer.ReadLength());
            deserializer.Read(out this.strictness);
            deserializer.Read(out this.start_asap);
            deserializer.Read(out this.timeout);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.start_controllers);
            serializer.Write(this.start_controllers);
            serializer.WriteLength(this.stop_controllers);
            serializer.Write(this.stop_controllers);
            serializer.Write(this.strictness);
            serializer.Write(this.start_asap);
            serializer.Write(this.timeout);
        }

        public override string ToString()
        {
            return "SwitchControllerRequest: " +
            "\nstart_controllers: " + System.String.Join(", ", start_controllers.ToList()) +
            "\nstop_controllers: " + System.String.Join(", ", stop_controllers.ToList()) +
            "\nstrictness: " + strictness.ToString() +
            "\nstart_asap: " + start_asap.ToString() +
            "\ntimeout: " + timeout.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
